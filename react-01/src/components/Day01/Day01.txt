In React, functional components and class components are two ways to create components, but functional components are now preferred due to hooks.

 Functional Components
- Definition: Simple JavaScript functions that return .
- State & Lifecycle: Uses hooks (useState, useEffect) for state and lifecycle methods.
- Performance: More optimized due to no need for this and automatic optimizations.
- Syntax:
  
  function Greeting(props) {
    return <h1>Hello, {props.name}!</h1>;
  }
  

 Class Components
- Definition: ES6 classes that extend React.Component.
- State & Lifecycle: Uses this.state and lifecycle methods (componentDidMount, componentDidUpdate).
- Performance: Slightly less optimized due to this keyword and more complex structure.
- Syntax:
  
  class Greeting extends React.Component {
    render() {
      return <h1>Hello, {this.props.name}!</h1>;
    }
  }
  

Which One to Use?
- Use functional components since React introduced hooks in v16.8, making them more readable, performant, and easier to manage.
- Class components are still valid but mostly used in legacy projects.

Would you like a comparison with lifecycle methods in both? 🚀

Props :
    2️⃣ Passing & Receiving Props
    Props are used to send data from parent to child components.
    import React from 'react';
    import Welcome from './Welcome';

    function App() {
    return (
        <div>
        <Welcome name="Rohit" age={25} />
        </div>
    );
    }

export default App;


    ✅ Example: Receiving Props in Functional Component
    
    import React from 'react';

    const Welcome = (props) => {
    return <h1>Welcome, {props.name}! You are {props.age} years old.</h1>;
    };

    export default Welcome;

    🟢 Props are read-only (they cannot be modified inside the component).

    ✅ Example: Receiving Props using Destructuring
    Instead of props.name, you can use destructuring:

    const Welcome = ({ name, age }) => {
    return <h1>Welcome, {name}! You are {age} years old.</h1>;
    };
    ✅ Cleaner and more readable syntax.

### 🚀 **React Practice Tasks (Components & Props)**  

Here are some hands-on tasks to solidify your understanding of **functional components, props, and conditional rendering**.  

---

## **📝 Task 1: Create a "UserCard" Component**
🔹 **Requirements:**  
✅ Create a `UserCard` component that accepts `name`, `age`, and `location` as **props** and displays them.  

🔹 **Example Output:**  
```jsx
<UserCard name="Rohit" age={25} location="Mumbai" />
```
🟢 Expected Output:  
```
Name: Rohit
Age: 25
Location: Mumbai
```
---

## **📝 Task 2: Display a Welcome Message with Props**
🔹 **Requirements:**  
✅ Create a `WelcomeMessage` component.  
✅ Pass a **`username`** as a prop and display:  
   - "Welcome, [username]! 🎉" if a username is provided.  
   - "Welcome, Guest! 👋" if no username is provided.  

🔹 **Example Usage:**  
```jsx
<WelcomeMessage username="Rohit" />
<WelcomeMessage />
```
---

## **📝 Task 3: Conditional Rendering – Show Login Button**
🔹 **Requirements:**  
✅ Create a `UserStatus` component.  
✅ Accept a prop `isLoggedIn`.  
✅ If `isLoggedIn` is `true`, show **"Welcome back!"**  
✅ If `isLoggedIn` is `false`, show a **"Login" button**.  

🔹 **Example Usage:**  
```jsx
<UserStatus isLoggedIn={true} />   // Shows: "Welcome back!"
<UserStatus isLoggedIn={false} />  // Shows: [Login Button]
```
---

## **📝 Task 4: Show Product List using Props**  
🔹 **Requirements:**  
✅ Create a `Product` component that accepts `name`, `price`, and `inStock` as **props**.  
✅ Display the product details and:  
   - If `inStock` is `true`, show "🟢 Available".  
   - If `inStock` is `false`, show "🔴 Out of Stock".  

🔹 **Example Usage:**  
```jsx
<Product name="iPhone 14" price={999} inStock={true} />
<Product name="MacBook Pro" price={1999} inStock={false} />
```
🟢 Expected Output:  
```
Product: iPhone 14
Price: $999
Status: 🟢 Available

Product: MacBook Pro
Price: $1999
Status: 🔴 Out of Stock
```
---

## **📝 Task 5: Dynamic Theme Button**  
🔹 **Requirements:**  
✅ Create a `ThemeButton` component.  
✅ Accept a prop `isDarkMode`.  
✅ If `isDarkMode` is `true`, display **"🌙 Dark Mode"**.  
✅ If `isDarkMode` is `false`, display **"☀️ Light Mode"**.  

🔹 **Example Usage:**  
```jsx
<ThemeButton isDarkMode={true} />  // Shows: "🌙 Dark Mode"
<ThemeButton isDarkMode={false} /> // Shows: "☀️ Light Mode"
```
---

## **Bonus Challenge 💪: Create a Profile Card Component**
🔹 **Requirements:**  
✅ Create a `ProfileCard` component that accepts `name`, `bio`, and `isOnline` as props.  
✅ Display the **user's name, bio, and online status**:  
   - If `isOnline` is `true`, show **🟢 Online**.  
   - If `isOnline` is `false`, show **🔴 Offline**.  

🔹 **Example Usage:**  
```jsx
<ProfileCard name="John Doe" bio="Web Developer" isOnline={true} />
<ProfileCard name="Jane Smith" bio="UI/UX Designer" isOnline={false} />
```
🟢 Expected Output:  
```
John Doe
Web Developer
Status: 🟢 Online

Jane Smith
UI/UX Designer
Status: 🔴 Offline
```
---

### **🔥 Ready? Start Coding! 🚀**
Try these out and let me know if you need help! 🎯💻