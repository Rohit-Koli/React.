ðŸ”¥ React Hooks - Complete Guide with Use Cases & Examples  

React Hooks allow functional components to manage state, lifecycle, and side effects 
without using class components. Below is a detailed explanation of all important hooks 
with examples! ðŸš€  

---

ðŸ“Œ 1. useState â€“ Managing State in Functional Components
Use Case: When you need to store and update values in a component (like form inputs, toggles, 
counters).  

âœ… Example â€“ Counter with useState  

import { useState } from "react";

const Counter = () => {
  const [count, setCount] = useState(0);

  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={() => setCount(count + 1)}>Increase</button>
      <button onClick={() => setCount(count - 1)}>Decrease</button>
    </div>
  );
};

export default Counter;

ðŸ”¹ Key Points:  
- useState(initialValue) initializes state.  
- setCount updates state without mutating the original value.  

---

ðŸ“Œ 2. useEffect â€“ Handling Side Effects
Use Case: When you need to fetch data, subscribe to events, or manipulate the DOM after render.  

âœ… Example â€“ Fetching Data from API (useEffect)  

import { useState, useEffect } from "react";

const UsersList = () => {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/users")
      .then(response => response.json())
      .then(data => setUsers(data));
  }, []); // Empty dependency array runs effect only on mount

  return (
    <ul>
      {users.map(user => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
};

export default UsersList;

ðŸ”¹ Key Points:  
- Runs after render (default behavior).  
- Dependencies ([]) control when it runs:  
  - [] â†’ Runs only once (component mount).  
  - [state] â†’ Runs when state changes.  
  - No array â†’ Runs after every render.  

---

ðŸ“Œ 3. useContext â€“ Managing Global State Without Props
Use Case: Avoids prop drilling by sharing state across components.  

âœ… Example â€“ Theme Context (useContext)  

import { createContext, useContext, useState } from "react";

// Create context
const ThemeContext = createContext();

const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState("light");

  return (
    <ThemeContext.Provider value={{ theme, setTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

const ChildComponent = () => {
  const { theme, setTheme } = useContext(ThemeContext);

  return (
    <div>
      <p>Current Theme: {theme}</p>
      <button onClick={() => setTheme(theme === "light" ? "dark" : "light")}>
        Toggle Theme
      </button>
    </div>
  );
};

const App = () => (
  <ThemeProvider>
    <ChildComponent />
  </ThemeProvider>
);

export default App;

ðŸ”¹ Key Points:  
- No need to pass props manually to child components.  
- useContext allows components to directly consume the shared state.  

---

ðŸ“Œ 4. useRef â€“ Accessing & Managing DOM Elements
Use Case: When you need to interact with DOM elements (focus, animations) or store values that don't trigger re-renders.  

âœ… Example â€“ Autofocus Input Field (useRef)  

import { useRef, useEffect } from "react";

const InputFocus = () => {
  const inputRef = useRef(null);

  useEffect(() => {
    inputRef.current.focus(); // Focus on input when component mounts
  }, []);

  return <input ref={inputRef} type="text" placeholder="Type here..." />;
};

export default InputFocus;

ðŸ”¹ Key Points:  
- useRef holds a reference to a DOM element.  
- It does not trigger re-renders.  

---

ðŸ“Œ 5. useReducer â€“ Alternative to useState for Complex State Logic
Use Case: When state updates involve multiple actions or conditions (like managing form state).  

âœ… Example â€“ Counter with useReducer  

import { useReducer } from "react";

const reducer = (state, action) => {
  switch (action.type) {
    case "increment":
      return { count: state.count + 1 };
    case "decrement":
      return { count: state.count - 1 };
    default:
      return state;
  }
};

const Counter = () => {
  const [state, dispatch] = useReducer(reducer, { count: 0 });

  return (
    <div>
      <h2>Count: {state.count}</h2>
      <button onClick={() => dispatch({ type: "increment" })}>+</button>
      <button onClick={() => dispatch({ type: "decrement" })}>-</button>
    </div>
  );
};

export default Counter;

ðŸ”¹ Key Points:  
- Works like Redux but for local state.  
- Uses actions instead of directly modifying state.  

---

ðŸ“Œ 6. useMemo â€“ Optimizing Expensive Computations
Use Case: When a component performs an expensive calculation, and you want to avoid re-computing unless dependencies change.  

âœ… Example â€“ Optimized Calculation (useMemo)  

import { useState, useMemo } from "react";

const ExpensiveCalculation = ({ num }) => {
  const compute = (num) => {
    console.log("Calculating...");
    return num  2; // Simulating an expensive calculation
  };

  const result = useMemo(() => compute(num), [num]);

  return <p>Result: {result}</p>;
};

ðŸ”¹ Key Points:  
- Memoizes (caches) the result of expensive calculations.  
- Runs only when num changes.  

---

ðŸ“Œ 7. useCallback â€“ Optimizing Function References
Use Case: Prevents unnecessary re-renders of child components by memoizing functions.  

âœ… Example â€“ Preventing Re-renders with useCallback  

import { useState, useCallback } from "react";

const Button = ({ handleClick }) => {
  console.log("Button rendered!");
  return <button onClick={handleClick}>Click Me</button>;
};

const MemoizedButton = React.memo(Button);

const App = () => {
  const [count, setCount] = useState(0);

  const increment = useCallback(() => {
    setCount(prev => prev + 1);
  }, []);

  return (
    <div>
      <h2>Count: {count}</h2>
      <MemoizedButton handleClick={increment} />
    </div>
  );
};

export default App;

ðŸ”¹ Key Points:  
- Prevents increment function from being recreated on re-renders.  
- Improves performance when passing functions to memoized child components.  

---

ðŸ“Œ 8. useLayoutEffect â€“ Synchronous Side Effects
Use Case: Like useEffect, but runs before the browser paints the screen (useful for measuring DOM elements).  

âœ… Example â€“ Measuring Element Size (useLayoutEffect)  

import { useLayoutEffect, useRef, useState } from "react";

const Box = () => {
  const boxRef = useRef(null);
  const [width, setWidth] = useState(0);

  useLayoutEffect(() => {
    setWidth(boxRef.current.offsetWidth);
  }, []);

  return <div ref={boxRef}>Width: {width}px</div>;
};

ðŸ”¹ Key Points:  
- Runs synchronously before the browser repaints.  

---

 ðŸš€ Conclusion
These hooks help manage state, handle side effects, optimize performance, and interact with the DOM in React. ðŸŽ¯  

Let me know if you need practice tasks for these hooks! ðŸ˜Š