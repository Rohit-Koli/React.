What is <Outlet/> ?
    <Outlet /> in React Router
    <Outlet /> is a special component in React Router that acts as a placeholder 
    for nested routes. It is used in parent components to render the matching child 
    components dynamically.

    ---

     How <Outlet /> Works?
    1. It is placed inside a parent route component.
    2. It allows nested routes to be rendered inside the parent.
    3. The child component that matches the current URL will replace <Outlet />.

    ---

     Example: Nested Routing with <Outlet />
    Let's say we have a Dashboard page with sub-pages like Stats and Reports.

     Step 1: Define Routes with Nesting
    jsx
    import { BrowserRouter, Routes, Route } from "react-router-dom";
    import Dashboard from "./Dashboard";
    import Stats from "./Stats";
    import Reports from "./Reports";

    function App() {
    return (
        <BrowserRouter>
        <Routes>
            <Route path="/dashboard" element={<Dashboard />}>
            <Route path="stats" element={<Stats />} />
            <Route path="reports" element={<Reports />} />
            </Route>
        </Routes>
        </BrowserRouter>
    );
    }

    export default App;
    
    Here, Dashboard is the parent route, and Stats and Reports are child routes.

    ---

     Step 2: Use <Outlet /> in the Parent Component
    jsx
    import { Link, Outlet } from "react-router-dom";

    function Dashboard() {
    return (
        <div>
        <h1>Dashboard</h1>
        <nav>
            <Link to="stats">Stats</Link>
            <Link to="reports">Reports</Link>
        </nav>
        <Outlet /> {/ This will render Stats or Reports based on URL /}
        </div>
    );
    }

    export default Dashboard;
    
    - <Outlet /> is where the nested component (either Stats or Reports) will be displayed.
    - The links navigate to /dashboard/stats and /dashboard/reports.

    ---

     Step 3: Create Child Components
    jsx
    function Stats() {
    return <h2>Dashboard Stats</h2>;
    }

    export default Stats;
    
    jsx
    function Reports() {
    return <h2>Dashboard Reports</h2>;
    }

    export default Reports;
    

    ---

     How It Works?
    | URL               | Rendered Component |
    |-----              |--------------------|
    | /dashboard        | Only Dashboard (no <Outlet /> content) |
    | /dashboard/stats  | Dashboard + Stats inside <Outlet /> |
    | /dashboard/reports| Dashboard + Reports inside <Outlet /> |

    ---

     Why Use <Outlet />?
    âœ… Helps manage nested routes in a clean way.  
    âœ… Avoids redundant layout code in every child component.  
    âœ… Improves reusability by keeping layouts separate from content.  

    Let me know if you need further clarification! ðŸš€