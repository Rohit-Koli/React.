React Router is a powerful library for handling navigation and routing in React 
applications. It allows you to create dynamic, client-side navigation without 
requiring full-page reloads. Let's dive deep into React Router concepts with examples.

---

 1. Introduction to React Router
React Router is a standard library for routing in React. It enables navigation 
between views of various components in a React Application, allows browser URL 
changes, and keeps UI in sync with the URL.

 Installation
To use React Router, you need to install the package:
sh
npm install react-router-dom


 Basic Setup
jsx
import { BrowserRouter, Routes, Route } from "react-router-dom";
import Home from "./Home";
import About from "./About";

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
      </Routes>
    </BrowserRouter>
  );
}

export default App;


---

 2. Core Concepts of React Router
 2.1. BrowserRouter
BrowserRouter is the main component that wraps the entire application and 
enables routing. It uses the HTML5 history API (pushState, replaceState, 
and popstate) to navigate.

 Example:
jsx
import { BrowserRouter } from "react-router-dom";

function App() {
  return (
    <BrowserRouter>
      <h1>My App</h1>
    </BrowserRouter>
  );
}


---

 2.2. Routes & Route
- Routes is a wrapper for defining multiple routes.
- Route is used to define a specific route and its associated component.

 Example:
jsx
import { BrowserRouter, Routes, Route } from "react-router-dom";
import Home from "./Home";
import About from "./About";

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
      </Routes>
    </BrowserRouter>
  );
}

export default App;

Here, when the user visits /, the Home component is rendered. When 
they visit /about, the About component is shown.

---

 2.3. Link & NavLink
Link is used to navigate between pages without reloading.

 Example of Link:
jsx
import { Link } from "react-router-dom";

function Navbar() {
  return (
    <nav>
      <Link to="/">Home</Link>
      <Link to="/about">About</Link>
    </nav>
  );
}

export default Navbar;

- NavLink is similar to Link, but it adds an active class to the active link.

 Example of NavLink:
jsx
import { NavLink } from "react-router-dom";

function Navbar() {
  return (
    <nav>
      <NavLink to="/" activeClassName="active">Home</NavLink>
      <NavLink to="/about" activeClassName="active">About</NavLink>
    </nav>
  );
}

export default Navbar;

The activeClassName="active" ensures the link is highlighted when active.

---

 2.4. useNavigate (Programmatic Navigation)
Instead of using <Link>, you can navigate programmatically using useNavigate().

 Example:
jsx
import { useNavigate } from "react-router-dom";

function Home() {
  const navigate = useNavigate();

  return (
    <div>
      <h1>Home</h1>
      <button onClick={() => navigate("/about")}>Go to About</button>
    </div>
  );
}

export default Home;

Here, clicking the button navigates to the /about route.

---

 2.5. Dynamic Routing & useParams
Sometimes, we need to create routes with dynamic parameters like /user/:id.

 Example:
jsx
import { useParams } from "react-router-dom";

function User() {
  const { id } = useParams(); // Extract the 'id' from URL
  return <h1>User ID: {id}</h1>;
}

export default User;

 Route Definition:
jsx
<Routes>
  <Route path="/user/:id" element={<User />} />
</Routes>

Visiting /user/5 will display User ID: 5.

---

 2.6. useLocation (Accessing Current URL Info)
The useLocation() hook returns an object containing information about the current URL.

 Example:
jsx
import { useLocation } from "react-router-dom";

function PageInfo() {
  const location = useLocation();
  return <h1>Current Path: {location.pathname}</h1>;
}

export default PageInfo;

If the user is on /about, it will display Current Path: /about.

---

 2.7. useSearchParams (Handling Query Parameters)
Query parameters (?id=5&name=John) can be accessed using useSearchParams.

 Example:
jsx
import { useSearchParams } from "react-router-dom";

function SearchPage() {
  const [searchParams] = useSearchParams();
  const id = searchParams.get("id");
  const name = searchParams.get("name");

  return (
    <div>
      <h1>Search Page</h1>
      <p>ID: {id}</p>
      <p>Name: {name}</p>
    </div>
  );
}

export default SearchPage;

Visiting /search?id=5&name=John will display:

ID: 5
Name: John


---

 2.8. Nested Routes
Nested routes allow components to be rendered inside other components.

 Example:
jsx
<Routes>
  <Route path="/dashboard" element={<Dashboard />}>
    <Route path="stats" element={<Stats />} />
    <Route path="reports" element={<Reports />} />
  </Route>
</Routes>

- /dashboard â†’ shows Dashboard
- /dashboard/stats â†’ shows Stats
- /dashboard/reports â†’ shows Reports

---

 2.9. Protected Routes (Authentication)
You can protect certain routes based on authentication status.

 Example:
jsx
import { Navigate } from "react-router-dom";

function ProtectedRoute({ children }) {
  const isAuthenticated = false; // Change to true for access
  return isAuthenticated ? children : <Navigate to="/login" />;
}

 Usage:
jsx
<Routes>
  <Route path="/dashboard" element={<ProtectedRoute><Dashboard /></ProtectedRoute>} />
</Routes>

If the user is not authenticated, they are redirected to /login.

---

 2.10. 404 Not Found Page
Handling unknown routes with a wildcard ().

 Example:
jsx
function NotFound() {
  return <h1>404 - Page Not Found</h1>;
}

<Routes>
  <Route path="" element={<NotFound />} />
</Routes>


---

 3. Summary of React Router Concepts
| Feature           | Description |
|-------------------|------------|
| BrowserRouter     | Enables routing |
| Routes & Route    | Defines routes and their components |
| Link & NavLink    | Provides navigation without reloading |
| useNavigate       | Programmatically navigate between pages |
| useParams         | Extracts dynamic route parameters |
| useLocation       | Gets the current URL info |
| useSearchParams   | Reads query parameters |
| Nested Routes     | Allows child routes inside parent routes |
| Protected Routes  | Restricts access to authenticated users |
| 404 Page          | Handles undefined routes |

Would you like more examples or a practical project using React Router? ðŸš€